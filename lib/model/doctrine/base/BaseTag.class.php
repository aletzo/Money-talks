<?php

/**
 * BaseTag
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property string $name
 * @property string $color
 * @property sfGuardUser $User
 * @property Doctrine_Collection $Actions
 * @property Doctrine_Collection $Budgets
 * @property Doctrine_Collection $ActionTag
 * @property Doctrine_Collection $BudgetTag
 * 
 * @method integer             getUserId()    Returns the current record's "user_id" value
 * @method string              getName()      Returns the current record's "name" value
 * @method string              getColor()     Returns the current record's "color" value
 * @method sfGuardUser         getUser()      Returns the current record's "User" value
 * @method Doctrine_Collection getActions()   Returns the current record's "Actions" collection
 * @method Doctrine_Collection getBudgets()   Returns the current record's "Budgets" collection
 * @method Doctrine_Collection getActionTag() Returns the current record's "ActionTag" collection
 * @method Doctrine_Collection getBudgetTag() Returns the current record's "BudgetTag" collection
 * @method Tag                 setUserId()    Sets the current record's "user_id" value
 * @method Tag                 setName()      Sets the current record's "name" value
 * @method Tag                 setColor()     Sets the current record's "color" value
 * @method Tag                 setUser()      Sets the current record's "User" value
 * @method Tag                 setActions()   Sets the current record's "Actions" collection
 * @method Tag                 setBudgets()   Sets the current record's "Budgets" collection
 * @method Tag                 setActionTag() Sets the current record's "ActionTag" collection
 * @method Tag                 setBudgetTag() Sets the current record's "BudgetTag" collection
 * 
 * @package    moneytalks
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTag extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tag');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('color', 'string', 6, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 6,
             ));

        $this->option('type', 'InnoDB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Action as Actions', array(
             'refClass' => 'ActionTag',
             'local' => 'tag_id',
             'foreign' => 'action_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Budget as Budgets', array(
             'refClass' => 'BudgetTag',
             'local' => 'tag_id',
             'foreign' => 'budget_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('ActionTag', array(
             'local' => 'id',
             'foreign' => 'tag_id'));

        $this->hasMany('BudgetTag', array(
             'local' => 'id',
             'foreign' => 'tag_id'));

        $softdelete0 = new Doctrine_Template_SoftDelete();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
    }
}